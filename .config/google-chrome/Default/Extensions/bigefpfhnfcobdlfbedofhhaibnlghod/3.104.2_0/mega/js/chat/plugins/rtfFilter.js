/**
 * Rich text formatting filter (e.g. markdown-like rich text formatting when parsing text messages)
 *
 * @param megaChat
 * @returns {RtfFilter}
 * @constructor
 */
var RtfFilter = function(megaChat) {
    "use strict";
    var self = this;

    self.regexps = {};
    self.regexps['(^|\\s)\\*{1,2}([^\\*\\n]{1,})\\*{1,2}'] = ['gi', '$1<strong>$2</strong>', '$1 $2'];
    self.regexps['(^|\\s)_{1,2}([^_\\n]{1,})_{1,2}'] = ['gi', '$1<em class="rtf-italic">$2</em>', '$1 $2'];
    self.regexps['^&gt;(.*)'] = ['gm', '<pre class="rtf-quote">$1</pre>', '$1']; // support > style.

    megaChat.on("onBeforeRenderMessage", function(e, eventData) {
        self.processMessage(e, eventData);
    });

    return this;
};


RtfFilter.prototype.processStripRtfFromMessage = function(msg) {
    "use strict";
    var self = this;
    if (!msg) {
        return "";
    }

    Object.keys(self.regexps).forEach(function(regexp) {
        var replacement = self.regexps[regexp];
        msg = msg.replace(new RegExp(regexp, replacement[0]), replacement[2]);
    });
    return msg;
};

RtfFilter.prototype.processMessage = function(e, eventData) {
    "use strict";
    var self = this;

    if (eventData.message.decrypted === false) {
        return;
    }


    // ignore if emoticons are already processed
    if (!eventData.message.processedBy) {
        eventData.message.processedBy = {};
    }
    if (eventData.message.processedBy['rtfFltr'] === true) {
        return;
    }

    // use the HTML version of the message if such exists (the HTML version should be generated by hooks/filters on the
    // client side.
    var textContents;
    if (eventData.message.textContents) {
        textContents = eventData.message.textContents;
    } else {
        return; // not yet decrypted.
    }


    var messageContents = eventData.message.messageHtml ? eventData.message.messageHtml : textContents;

    if (!messageContents) {
        return; // ignore, maybe its a system message (or composing/paused composing notification)
    }

    messageContents = messageContents ? $.trim(messageContents) : "";

    /*jshint -W049 */
    messageContents = messageContents.replace(/\<br\/\>/gi, '\n');
    /*jshint +W049 */
    Object.keys(self.regexps).forEach(function(regexp) {
        var replacement = self.regexps[regexp];
        messageContents = messageContents.replace(new RegExp(regexp, replacement[0]), replacement[1]);
    });

    messageContents = messageContents.replace(/\n/gi, "<br/>");

    eventData.message.messageHtml = messageContents;
    eventData.message.processedBy['rtfFltr'] = true;

    return messageContents;
};
